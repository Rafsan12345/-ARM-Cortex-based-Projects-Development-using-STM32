#include "stm32f4xx_hal.h"
#include <stdint.h>

#define FLASH_USER_START_ADDR   0x08060000   // start address in Flash (sector/page depends on STM32)
#define FLASH_USER_END_ADDR     0x080607FF
#define DATA_32                 0x12345678

int main(void)
{
    HAL_Init();
    SystemClock_Config();
    MX_GPIO_Init();

    uint32_t Address = FLASH_USER_START_ADDR;
    uint32_t read_data = 0;

    // 1. Unlock Flash for write access
    HAL_FLASH_Unlock();

    // 2. Erase page/sector first
    FLASH_EraseInitTypeDef EraseInitStruct;
    uint32_t PageError;

    EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
    EraseInitStruct.Sector = FLASH_SECTOR_7; // Example: sector 7 on STM32F4
    EraseInitStruct.NbSectors = 1;
    EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;

    if(HAL_FLASHEx_Erase(&EraseInitStruct, &PageError) != HAL_OK)
    {
        // Handle error
        while(1);
    }

    // 3. Write data to flash
    if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Address, DATA_32) != HAL_OK)
    {
        // Handle error
        while(1);
    }

    // 4. Lock flash after write
    HAL_FLASH_Lock();

    // 5. Read back data
    read_data = *(__IO uint32_t*)FLASH_USER_START_ADDR;

    while(1)
    {
        // main loop idle, can toggle LED to indicate success
        if(read_data == DATA_32)
            HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
        HAL_Delay(500);
    }
}
